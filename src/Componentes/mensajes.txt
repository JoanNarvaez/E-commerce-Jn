.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 20px;
  max-width: 1000px; /* Establece un ancho máximo para la cuadrícula */
  margin: 0 auto; /* Centra la cuadrícula en la página */
}

.gallery-image {
  position: relative;
  overflow: hidden;
  border: 2px solid #ccc; /* Borde alrededor de la imagen */
  border-radius: 5px; /* Bordes redondeados */
  max-width: 150px; /* Establece un ancho máximo para cada imagen */
}

.gallery-image img {
  width: 100%;
  height: auto;
  transition: transform 0.3s ease;
}

.gallery-image:hover img {
  transform: scale(1.1);
}

.gallery-image h3,
.gallery-image h5 {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  margin: 0;
  padding: 5px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  font-size: 14px;
  text-align: center;
  opacity: 0; /* Oculta los textos inicialmente */
  transition: opacity 0.3s ease;
}

.gallery-image:hover h3,
.gallery-image:hover h5 {
  opacity: 1; /* Muestra los textos al pasar el ratón */
}


<>
    <BarraMenu></BarraMenu>
    <form
      style={{
        display: "flex",
        flexDirection: "column",
        width: 200,
      }}
      onClick={() => {
        console.log("CLICK EN FORM");
      }}
    >
      
      <label>Nombre</label>
      <input
        onChange={handleChange}
        name="nombre"
        value={nombre}
        placeholder="Ingrese su nombre..."
      />

      <label>Email</label>
      <input
        onChange={handleChange}
        name="email"
        value={email}
        placeholder="Ingrese su correo..."
        type="email"
      />
      <input
        style={{ backgroundColor: "blue" }}
        type="submit"
        onClick={handleSubmit}
      />
      <div>
        {lista.map((el, idx) => (
          <p key={idx.toString()}>{el}</p>
        ))}
      </div>
    </form>
    </>

  
  
    import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  productos: [],
};
const carritoSlice = createSlice({
  initialState,
  name: "carrito",
  reducers: {
    agregarAlCarrito: (estadoActual, action) => {
      const producto = action.payload;
      estadoActual.productos.push(producto);
    },
  },
});

export const carritoReducer = carritoSlice.reducer;
export default carritoSlice.actions;


__________________________________________________________
const Carrito = () => {
  const dispatch = useDispatch();
  const productosAgregados = useSelector((estadoActualDelApp) => {
    console.log(estadoActualDelApp.carrito.productos);
    return estadoActualDelApp.carrito.productos;
  });


  const handleEliminar = (id) => {
    // dispatch(eliminarDelCarrito(id));
    dispatch(accionesDelCarrito.eliminarDelCarrito(id));
  };
  __________________________________________________________import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  productos: [],
};

const carritoSlice = createSlice({
  initialState,
  name: "carrito",
  reducers: {
    agregarAlCarrito: (estadoActual, action) => {
      const producto = action.payload;
      estadoActual.productos.push(producto);
    },
    eliminarDelCarrito: (estadoActual, action) => {
      const productoId = action.payload;
      estadoActual.productos = estadoActual.productos.filter(producto => producto.id !== productoId);
    }
  },
});

export const carritoReducer = carritoSlice.reducer;
export default carritoSlice.actions;